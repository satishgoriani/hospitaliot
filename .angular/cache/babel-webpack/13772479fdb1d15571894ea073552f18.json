{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetDocumentTextDetectionRequest, GetDocumentTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentTextDetectionCommand, serializeAws_json1_1GetDocumentTextDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document.\n *      Amazon Textract can detect lines of text and the words that make up a line of text.</p>\n *          <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentTextDetection</code>. To get the results of the text-detection\n *          operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the\n *          job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>\n *             <code>GetDocumentTextDetection</code> returns an array of <a>Block</a>\n *          objects. </p>\n *          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object\n *         is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is\n *         a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>\n *\n *          <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there\n *          are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\n\nvar GetDocumentTextDetectionCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetDocumentTextDetectionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetDocumentTextDetectionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetDocumentTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"GetDocumentTextDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetDocumentTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetDocumentTextDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetDocumentTextDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetDocumentTextDetectionCommand(input, context);\n  };\n\n  GetDocumentTextDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetDocumentTextDetectionCommand(output, context);\n  };\n\n  return GetDocumentTextDetectionCommand;\n}($Command);\n\nexport { GetDocumentTextDetectionCommand };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/client-textract/dist/es/commands/GetDocumentTextDetectionCommand.js"],"names":["__extends","GetDocumentTextDetectionRequest","GetDocumentTextDetectionResponse","deserializeAws_json1_1GetDocumentTextDetectionCommand","serializeAws_json1_1GetDocumentTextDetectionCommand","getSerdePlugin","Command","$Command","GetDocumentTextDetectionCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,+BAAT,EAA0CC,gCAA1C,QAAkF,oBAAlF;AACA,SAASC,qDAAT,EAAgEC,mDAAhE,QAA4H,0BAA5H;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,+BAA+B;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACnET,EAAAA,SAAS,CAACQ,+BAAD,EAAkCC,MAAlC,CAAT,CADmE,CAEnE;AACA;;;AACA,WAASD,+BAAT,CAAyCE,KAAzC,EAAgD;AAC5C,QAAIC,KAAK,GACT;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;AAGAD,IAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd;AACA,WAAOC,KAAP,CAL4C,CAM5C;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,+BAA+B,CAACK,SAAhC,CAA0CC,iBAA1C,GAA8D,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;AACzG,SAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;AACA,QAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;AACA,QAAIC,UAAU,GAAG,gBAAjB;AACA,QAAIC,WAAW,GAAG,iCAAlB;AACA,QAAIC,uBAAuB,GAAG;AAC1BH,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,UAAU,EAAEA,UAFc;AAG1BC,MAAAA,WAAW,EAAEA,WAHa;AAI1BE,MAAAA,uBAAuB,EAAE3B,+BAA+B,CAAC4B,kBAJ/B;AAK1BC,MAAAA,wBAAwB,EAAE5B,gCAAgC,CAAC2B;AALjC,KAA9B;AAOA,QAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;AACA,WAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;AACpC,aAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;AACH,KAFM,EAEJU,uBAFI,CAAP;AAGH,GAjBD;;AAkBAnB,EAAAA,+BAA+B,CAACK,SAAhC,CAA0CO,SAA1C,GAAsD,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;AAC5E,WAAO/B,mDAAmD,CAACM,KAAD,EAAQyB,OAAR,CAA1D;AACH,GAFD;;AAGA3B,EAAAA,+BAA+B,CAACK,SAAhC,CAA0CQ,WAA1C,GAAwD,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;AAC/E,WAAOhC,qDAAqD,CAACiC,MAAD,EAASD,OAAT,CAA5D;AACH,GAFD;;AAGA,SAAO3B,+BAAP;AACH,CAxCoD,CAwCnDD,QAxCmD,CAArD;;AAyCA,SAASC,+BAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetDocumentTextDetectionRequest, GetDocumentTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetDocumentTextDetectionCommand, serializeAws_json1_1GetDocumentTextDetectionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the results for an Amazon Textract asynchronous operation that detects text in a document.\n *      Amazon Textract can detect lines of text and the words that make up a line of text.</p>\n *          <p>You start asynchronous text detection by calling <a>StartDocumentTextDetection</a>, which returns a job identifier\n *             (<code>JobId</code>). When the text detection operation finishes, Amazon Textract publishes a\n *          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to\n *             <code>StartDocumentTextDetection</code>. To get the results of the text-detection\n *          operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <code>GetDocumentTextDetection</code>, and pass the\n *          job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>\n *             <code>GetDocumentTextDetection</code> returns an array of <a>Block</a>\n *          objects. </p>\n *          <p>Each document page has as an associated <code>Block</code> of type PAGE. Each PAGE <code>Block</code> object\n *         is the parent of LINE <code>Block</code> objects that represent the lines of detected text on a page. A LINE <code>Block</code> object is\n *         a parent for each word that makes up the line. Words are represented by <code>Block</code> objects of type WORD.</p>\n *\n *          <p>Use the MaxResults parameter to limit the number of blocks that are returned. If there\n *          are more results than specified in <code>MaxResults</code>, the value of\n *             <code>NextToken</code> in the operation response contains a pagination token for getting\n *          the next set of results. To get the next page of results, call\n *             <code>GetDocumentTextDetection</code>, and populate the <code>NextToken</code> request\n *          parameter with the token value that's returned from the previous call to\n *             <code>GetDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\nvar GetDocumentTextDetectionCommand = /** @class */ (function (_super) {\n    __extends(GetDocumentTextDetectionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetDocumentTextDetectionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetDocumentTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"TextractClient\";\n        var commandName = \"GetDocumentTextDetectionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetDocumentTextDetectionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetDocumentTextDetectionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetDocumentTextDetectionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetDocumentTextDetectionCommand(input, context);\n    };\n    GetDocumentTextDetectionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetDocumentTextDetectionCommand(output, context);\n    };\n    return GetDocumentTextDetectionCommand;\n}($Command));\nexport { GetDocumentTextDetectionCommand };\n"]},"metadata":{},"sourceType":"module"}