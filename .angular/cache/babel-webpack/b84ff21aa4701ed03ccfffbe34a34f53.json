{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartPersonTrackingRequest, StartPersonTrackingResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartPersonTrackingCommand, serializeAws_json1_1StartPersonTrackingCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts the asynchronous tracking of a person's path in a stored video.</p>\n *          <p>Amazon Rekognition Video can track the path of people in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *        and the filename of the video. <code>StartPersonTracking</code>\n *        returns a job identifier (<code>JobId</code>) which you use to get the results of the operation.\n *        When label detection is finished, Amazon Rekognition publishes a completion status\n *        to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>. </p>\n *          <p>To get the results of the person detection operation, first check that the status value published to the Amazon SNS\n *        topic is <code>SUCCEEDED</code>. If so, call  <a>GetPersonTracking</a> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>\n */\n\nvar StartPersonTrackingCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartPersonTrackingCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartPersonTrackingCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartPersonTrackingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"StartPersonTrackingCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartPersonTrackingRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartPersonTrackingResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartPersonTrackingCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartPersonTrackingCommand(input, context);\n  };\n\n  StartPersonTrackingCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartPersonTrackingCommand(output, context);\n  };\n\n  return StartPersonTrackingCommand;\n}($Command);\n\nexport { StartPersonTrackingCommand };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/client-rekognition/dist/es/commands/StartPersonTrackingCommand.js"],"names":["__extends","StartPersonTrackingRequest","StartPersonTrackingResponse","deserializeAws_json1_1StartPersonTrackingCommand","serializeAws_json1_1StartPersonTrackingCommand","getSerdePlugin","Command","$Command","StartPersonTrackingCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,0BAAT,EAAqCC,2BAArC,QAAwE,oBAAxE;AACA,SAASC,gDAAT,EAA2DC,8CAA3D,QAAkH,0BAAlH;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,0BAA0B;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC9DT,EAAAA,SAAS,CAACQ,0BAAD,EAA6BC,MAA7B,CAAT,CAD8D,CAE9D;AACA;;;AACA,WAASD,0BAAT,CAAoCE,KAApC,EAA2C;AACvC,QAAIC,KAAK,GACT;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;AAGAD,IAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd;AACA,WAAOC,KAAP,CALuC,CAMvC;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,0BAA0B,CAACK,SAA3B,CAAqCC,iBAArC,GAAyD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;AACpG,SAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;AACA,QAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;AACA,QAAIC,UAAU,GAAG,mBAAjB;AACA,QAAIC,WAAW,GAAG,4BAAlB;AACA,QAAIC,uBAAuB,GAAG;AAC1BH,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,UAAU,EAAEA,UAFc;AAG1BC,MAAAA,WAAW,EAAEA,WAHa;AAI1BE,MAAAA,uBAAuB,EAAE3B,0BAA0B,CAAC4B,kBAJ1B;AAK1BC,MAAAA,wBAAwB,EAAE5B,2BAA2B,CAAC2B;AAL5B,KAA9B;AAOA,QAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;AACA,WAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;AACpC,aAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;AACH,KAFM,EAEJU,uBAFI,CAAP;AAGH,GAjBD;;AAkBAnB,EAAAA,0BAA0B,CAACK,SAA3B,CAAqCO,SAArC,GAAiD,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;AACvE,WAAO/B,8CAA8C,CAACM,KAAD,EAAQyB,OAAR,CAArD;AACH,GAFD;;AAGA3B,EAAAA,0BAA0B,CAACK,SAA3B,CAAqCQ,WAArC,GAAmD,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;AAC1E,WAAOhC,gDAAgD,CAACiC,MAAD,EAASD,OAAT,CAAvD;AACH,GAFD;;AAGA,SAAO3B,0BAAP;AACH,CAxC+C,CAwC9CD,QAxC8C,CAAhD;;AAyCA,SAASC,0BAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { StartPersonTrackingRequest, StartPersonTrackingResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartPersonTrackingCommand, serializeAws_json1_1StartPersonTrackingCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts the asynchronous tracking of a person's path in a stored video.</p>\n *          <p>Amazon Rekognition Video can track the path of people in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *        and the filename of the video. <code>StartPersonTracking</code>\n *        returns a job identifier (<code>JobId</code>) which you use to get the results of the operation.\n *        When label detection is finished, Amazon Rekognition publishes a completion status\n *        to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>. </p>\n *          <p>To get the results of the person detection operation, first check that the status value published to the Amazon SNS\n *        topic is <code>SUCCEEDED</code>. If so, call  <a>GetPersonTracking</a> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>\n */\nvar StartPersonTrackingCommand = /** @class */ (function (_super) {\n    __extends(StartPersonTrackingCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function StartPersonTrackingCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    StartPersonTrackingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"StartPersonTrackingCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: StartPersonTrackingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: StartPersonTrackingResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    StartPersonTrackingCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1StartPersonTrackingCommand(input, context);\n    };\n    StartPersonTrackingCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1StartPersonTrackingCommand(output, context);\n    };\n    return StartPersonTrackingCommand;\n}($Command));\nexport { StartPersonTrackingCommand };\n"]},"metadata":{},"sourceType":"module"}