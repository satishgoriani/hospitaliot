{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartContentModerationRequest, StartContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartContentModerationCommand, serializeAws_json1_1StartContentModerationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p> Starts asynchronous detection of unsafe content in a stored video.</p>\n *          <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *       and the filename of the video. <code>StartContentModeration</code>\n *         returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n *         When unsafe content analysis is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *         <p>To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call <a>GetContentModeration</a> and pass the job identifier\n *         (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\n\nvar StartContentModerationCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartContentModerationCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartContentModerationCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"StartContentModerationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartContentModerationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartContentModerationResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartContentModerationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartContentModerationCommand(input, context);\n  };\n\n  StartContentModerationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartContentModerationCommand(output, context);\n  };\n\n  return StartContentModerationCommand;\n}($Command);\n\nexport { StartContentModerationCommand };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/client-rekognition/dist/es/commands/StartContentModerationCommand.js"],"names":["__extends","StartContentModerationRequest","StartContentModerationResponse","deserializeAws_json1_1StartContentModerationCommand","serializeAws_json1_1StartContentModerationCommand","getSerdePlugin","Command","$Command","StartContentModerationCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,6BAAT,EAAwCC,8BAAxC,QAA8E,oBAA9E;AACA,SAASC,mDAAT,EAA8DC,iDAA9D,QAAwH,0BAAxH;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,6BAA6B;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACjET,EAAAA,SAAS,CAACQ,6BAAD,EAAgCC,MAAhC,CAAT,CADiE,CAEjE;AACA;;;AACA,WAASD,6BAAT,CAAuCE,KAAvC,EAA8C;AAC1C,QAAIC,KAAK,GACT;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;AAGAD,IAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd;AACA,WAAOC,KAAP,CAL0C,CAM1C;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,6BAA6B,CAACK,SAA9B,CAAwCC,iBAAxC,GAA4D,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;AACvG,SAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;AACA,QAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;AACA,QAAIC,UAAU,GAAG,mBAAjB;AACA,QAAIC,WAAW,GAAG,+BAAlB;AACA,QAAIC,uBAAuB,GAAG;AAC1BH,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,UAAU,EAAEA,UAFc;AAG1BC,MAAAA,WAAW,EAAEA,WAHa;AAI1BE,MAAAA,uBAAuB,EAAE3B,6BAA6B,CAAC4B,kBAJ7B;AAK1BC,MAAAA,wBAAwB,EAAE5B,8BAA8B,CAAC2B;AAL/B,KAA9B;AAOA,QAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;AACA,WAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;AACpC,aAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;AACH,KAFM,EAEJU,uBAFI,CAAP;AAGH,GAjBD;;AAkBAnB,EAAAA,6BAA6B,CAACK,SAA9B,CAAwCO,SAAxC,GAAoD,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;AAC1E,WAAO/B,iDAAiD,CAACM,KAAD,EAAQyB,OAAR,CAAxD;AACH,GAFD;;AAGA3B,EAAAA,6BAA6B,CAACK,SAA9B,CAAwCQ,WAAxC,GAAsD,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;AAC7E,WAAOhC,mDAAmD,CAACiC,MAAD,EAASD,OAAT,CAA1D;AACH,GAFD;;AAGA,SAAO3B,6BAAP;AACH,CAxCkD,CAwCjDD,QAxCiD,CAAnD;;AAyCA,SAASC,6BAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { StartContentModerationRequest, StartContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartContentModerationCommand, serializeAws_json1_1StartContentModerationCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p> Starts asynchronous detection of unsafe content in a stored video.</p>\n *          <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *       and the filename of the video. <code>StartContentModeration</code>\n *         returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n *         When unsafe content analysis is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *         <p>To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call <a>GetContentModeration</a> and pass the job identifier\n *         (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nvar StartContentModerationCommand = /** @class */ (function (_super) {\n    __extends(StartContentModerationCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function StartContentModerationCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    StartContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"StartContentModerationCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: StartContentModerationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: StartContentModerationResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    StartContentModerationCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1StartContentModerationCommand(input, context);\n    };\n    StartContentModerationCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1StartContentModerationCommand(output, context);\n    };\n    return StartContentModerationCommand;\n}($Command));\nexport { StartContentModerationCommand };\n"]},"metadata":{},"sourceType":"module"}