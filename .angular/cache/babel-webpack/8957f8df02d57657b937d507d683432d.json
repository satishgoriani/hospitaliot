{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n  var _a;\n\n  return _a = {}, _a[Symbol.asyncIterator] = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;\n\n      var _a, _b;\n\n      var e_1, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 12, 13, 18]);\n\n            source_1 = __asyncValues(source);\n            _d.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(source_1.next())];\n\n          case 2:\n            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3\n            /*break*/\n            , 11];\n            chunk = source_1_1.value;\n            message = options.eventMarshaller.unmarshall(chunk);\n            messageType = message.headers[\":message-type\"].value;\n            if (!(messageType === \"error\")) return [3\n            /*break*/\n            , 3];\n            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n\n          case 3:\n            if (!(messageType === \"exception\")) return [3\n            /*break*/\n            , 5];\n            code = message.headers[\":exception-type\"].value;\n            exception = (_a = {}, _a[code] = message, _a);\n            return [4\n            /*yield*/\n            , __await(options.deserializer(exception))];\n\n          case 4:\n            deserializedException = _d.sent();\n\n            if (deserializedException.$unknown) {\n              error = new Error(options.toUtf8(message.body));\n              error.name = code;\n              throw error;\n            }\n\n            throw deserializedException[code];\n\n          case 5:\n            if (!(messageType === \"event\")) return [3\n            /*break*/\n            , 9];\n            event = (_b = {}, _b[message.headers[\":event-type\"].value] = message, _b);\n            return [4\n            /*yield*/\n            , __await(options.deserializer(event))];\n\n          case 6:\n            deserialized = _d.sent();\n            if (deserialized.$unknown) return [3\n            /*break*/\n            , 10];\n            return [4\n            /*yield*/\n            , __await(deserialized)];\n\n          case 7:\n            return [4\n            /*yield*/\n            , _d.sent()];\n\n          case 8:\n            _d.sent();\n\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            throw Error(\"Unrecognizable event type: \" + message.headers[\":event-type\"].value);\n\n          case 10:\n            return [3\n            /*break*/\n            , 1];\n\n          case 11:\n            return [3\n            /*break*/\n            , 18];\n\n          case 12:\n            e_1_1 = _d.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 18];\n\n          case 13:\n            _d.trys.push([13,, 16, 17]);\n\n            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3\n            /*break*/\n            , 15];\n            return [4\n            /*yield*/\n            , __await(_c.call(source_1))];\n\n          case 14:\n            _d.sent();\n\n            _d.label = 15;\n\n          case 15:\n            return [3\n            /*break*/\n            , 17];\n\n          case 16:\n            if (e_1) throw e_1.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 18:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, _a;\n}","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/eventstream-serde-universal/dist/es/getUnmarshalledStream.js"],"names":["__asyncGenerator","__asyncValues","__await","__generator","getUnmarshalledStream","source","options","_a","Symbol","asyncIterator","arguments","source_1","source_1_1","chunk","message","messageType","unmodeledError","code","exception","deserializedException","error","event","deserialized","e_1_1","_b","e_1","_c","_d","label","trys","push","next","sent","done","value","eventMarshaller","unmarshall","headers","Error","name","deserializer","$unknown","toUtf8","body","return","call"],"mappings":"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","sourcesContent":["import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n    var _a;\n    return _a = {},\n        _a[Symbol.asyncIterator] = function () {\n            return __asyncGenerator(this, arguments, function () {\n                var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;\n                var _a, _b;\n                var e_1, _c;\n                return __generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            _d.trys.push([0, 12, 13, 18]);\n                            source_1 = __asyncValues(source);\n                            _d.label = 1;\n                        case 1: return [4 /*yield*/, __await(source_1.next())];\n                        case 2:\n                            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3 /*break*/, 11];\n                            chunk = source_1_1.value;\n                            message = options.eventMarshaller.unmarshall(chunk);\n                            messageType = message.headers[\":message-type\"].value;\n                            if (!(messageType === \"error\")) return [3 /*break*/, 3];\n                            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n                            unmodeledError.name = message.headers[\":error-code\"].value;\n                            throw unmodeledError;\n                        case 3:\n                            if (!(messageType === \"exception\")) return [3 /*break*/, 5];\n                            code = message.headers[\":exception-type\"].value;\n                            exception = (_a = {}, _a[code] = message, _a);\n                            return [4 /*yield*/, __await(options.deserializer(exception))];\n                        case 4:\n                            deserializedException = _d.sent();\n                            if (deserializedException.$unknown) {\n                                error = new Error(options.toUtf8(message.body));\n                                error.name = code;\n                                throw error;\n                            }\n                            throw deserializedException[code];\n                        case 5:\n                            if (!(messageType === \"event\")) return [3 /*break*/, 9];\n                            event = (_b = {},\n                                _b[message.headers[\":event-type\"].value] = message,\n                                _b);\n                            return [4 /*yield*/, __await(options.deserializer(event))];\n                        case 6:\n                            deserialized = _d.sent();\n                            if (deserialized.$unknown)\n                                return [3 /*break*/, 10];\n                            return [4 /*yield*/, __await(deserialized)];\n                        case 7: return [4 /*yield*/, _d.sent()];\n                        case 8:\n                            _d.sent();\n                            return [3 /*break*/, 10];\n                        case 9: throw Error(\"Unrecognizable event type: \" + message.headers[\":event-type\"].value);\n                        case 10: return [3 /*break*/, 1];\n                        case 11: return [3 /*break*/, 18];\n                        case 12:\n                            e_1_1 = _d.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3 /*break*/, 18];\n                        case 13:\n                            _d.trys.push([13, , 16, 17]);\n                            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3 /*break*/, 15];\n                            return [4 /*yield*/, __await(_c.call(source_1))];\n                        case 14:\n                            _d.sent();\n                            _d.label = 15;\n                        case 15: return [3 /*break*/, 17];\n                        case 16:\n                            if (e_1) throw e_1.error;\n                            return [7 /*endfinally*/];\n                        case 17: return [7 /*endfinally*/];\n                        case 18: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        _a;\n}\n"]},"metadata":{},"sourceType":"module"}