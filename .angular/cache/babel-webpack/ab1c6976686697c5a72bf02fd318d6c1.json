{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StopStreamEncryptionInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StopStreamEncryptionCommand, serializeAws_json1_1StopStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Disables server-side encryption for a specified stream. </p>\n *         <p>Stopping encryption is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Stopping encryption normally takes a\n *             few seconds to complete, but it can take minutes. You can continue to read and write\n *             data to your stream while its status is <code>UPDATING</code>. Once the status of the\n *             stream is <code>ACTIVE</code>, records written to the stream are no longer encrypted by\n *             Kinesis Data Streams. </p>\n *         <p>API Limits: You can successfully disable server-side encryption 25 times in a\n *             rolling 24-hour period. </p>\n *         <p>Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code>\n *             status before all records written to the stream are no longer subject to encryption.\n *             After you disabled encryption, you can verify that encryption is not applied by\n *             inspecting the API response from <code>PutRecord</code> or\n *             <code>PutRecords</code>.</p>\n */\n\nvar StopStreamEncryptionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StopStreamEncryptionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StopStreamEncryptionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StopStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"StopStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StopStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StopStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StopStreamEncryptionCommand(input, context);\n  };\n\n  StopStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StopStreamEncryptionCommand(output, context);\n  };\n\n  return StopStreamEncryptionCommand;\n}($Command);\n\nexport { StopStreamEncryptionCommand };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/client-kinesis/dist/es/commands/StopStreamEncryptionCommand.js"],"names":["__extends","StopStreamEncryptionInput","deserializeAws_json1_1StopStreamEncryptionCommand","serializeAws_json1_1StopStreamEncryptionCommand","getSerdePlugin","Command","$Command","StopStreamEncryptionCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","requestHandler","resolve","request","handle","context"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,QAA0C,oBAA1C;AACA,SAASC,iDAAT,EAA4DC,+CAA5D,QAAoH,0BAApH;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,2BAA2B;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC/DR,EAAAA,SAAS,CAACO,2BAAD,EAA8BC,MAA9B,CAAT,CAD+D,CAE/D;AACA;;;AACA,WAASD,2BAAT,CAAqCE,KAArC,EAA4C;AACxC,QAAIC,KAAK,GACT;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;AAGAD,IAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd;AACA,WAAOC,KAAP,CALwC,CAMxC;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,2BAA2B,CAACK,SAA5B,CAAsCC,iBAAtC,GAA0D,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;AACrG,SAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;AACA,QAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;AACA,QAAIC,UAAU,GAAG,eAAjB;AACA,QAAIC,WAAW,GAAG,6BAAlB;AACA,QAAIC,uBAAuB,GAAG;AAC1BH,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,UAAU,EAAEA,UAFc;AAG1BC,MAAAA,WAAW,EAAEA,WAHa;AAI1BE,MAAAA,uBAAuB,EAAE1B,yBAAyB,CAAC2B,kBAJzB;AAK1BC,MAAAA,wBAAwB,EAAE,UAAUC,MAAV,EAAkB;AAAE,eAAOA,MAAP;AAAgB;AALpC,KAA9B;AAOA,QAAIC,cAAc,GAAGhB,aAAa,CAACgB,cAAnC;AACA,WAAOV,KAAK,CAACW,OAAN,CAAc,UAAUC,OAAV,EAAmB;AACpC,aAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuCjB,OAAO,IAAI,EAAlD,CAAP;AACH,KAFM,EAEJU,uBAFI,CAAP;AAGH,GAjBD;;AAkBAnB,EAAAA,2BAA2B,CAACK,SAA5B,CAAsCO,SAAtC,GAAkD,UAAUV,KAAV,EAAiB0B,OAAjB,EAA0B;AACxE,WAAOhC,+CAA+C,CAACM,KAAD,EAAQ0B,OAAR,CAAtD;AACH,GAFD;;AAGA5B,EAAAA,2BAA2B,CAACK,SAA5B,CAAsCQ,WAAtC,GAAoD,UAAUU,MAAV,EAAkBK,OAAlB,EAA2B;AAC3E,WAAOjC,iDAAiD,CAAC4B,MAAD,EAASK,OAAT,CAAxD;AACH,GAFD;;AAGA,SAAO5B,2BAAP;AACH,CAxCgD,CAwC/CD,QAxC+C,CAAjD;;AAyCA,SAASC,2BAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { StopStreamEncryptionInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StopStreamEncryptionCommand, serializeAws_json1_1StopStreamEncryptionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Disables server-side encryption for a specified stream. </p>\n *         <p>Stopping encryption is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Stopping encryption normally takes a\n *             few seconds to complete, but it can take minutes. You can continue to read and write\n *             data to your stream while its status is <code>UPDATING</code>. Once the status of the\n *             stream is <code>ACTIVE</code>, records written to the stream are no longer encrypted by\n *             Kinesis Data Streams. </p>\n *         <p>API Limits: You can successfully disable server-side encryption 25 times in a\n *             rolling 24-hour period. </p>\n *         <p>Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code>\n *             status before all records written to the stream are no longer subject to encryption.\n *             After you disabled encryption, you can verify that encryption is not applied by\n *             inspecting the API response from <code>PutRecord</code> or\n *             <code>PutRecords</code>.</p>\n */\nvar StopStreamEncryptionCommand = /** @class */ (function (_super) {\n    __extends(StopStreamEncryptionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function StopStreamEncryptionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    StopStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"StopStreamEncryptionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: StopStreamEncryptionInput.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    StopStreamEncryptionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1StopStreamEncryptionCommand(input, context);\n    };\n    StopStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1StopStreamEncryptionCommand(output, context);\n    };\n    return StopStreamEncryptionCommand;\n}($Command));\nexport { StopStreamEncryptionCommand };\n"]},"metadata":{},"sourceType":"module"}