{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetCelebrityRecognitionRequest, GetCelebrityRecognitionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetCelebrityRecognitionCommand, serializeAws_json1_1GetCelebrityRecognitionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by\n *      <a>StartCelebrityRecognition</a>.</p>\n *          <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call\n *       to <a>StartCelebrityRecognition</a>  which returns a job identifier (<code>JobId</code>).\n *       When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartCelebrityRecognition</code>.\n *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n *\n *          <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p>\n *          <p>\n *             <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array\n *       (<code>Celebrities</code>) of <a>CelebrityRecognition</a>\n *\n *       objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a <a>CelebrityDetail</a>\n *       object and the time, <code>Timestamp</code>, the celebrity was detected.\n *       </p>\n *          <note>\n *\n *             <p>\n *                <code>GetCelebrityRecognition</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *          <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video).\n *       You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>\n *          <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don't store\n *       the additional information urls, you can get them later by calling <a>GetCelebrityInfo</a> with the celebrity identifer.</p>\n *          <p>No information is returned for faces not recognized as celebrities.</p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *       pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token\n *       value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>\n */\n\nvar GetCelebrityRecognitionCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetCelebrityRecognitionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetCelebrityRecognitionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetCelebrityRecognitionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetCelebrityRecognitionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetCelebrityRecognitionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetCelebrityRecognitionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetCelebrityRecognitionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetCelebrityRecognitionCommand(input, context);\n  };\n\n  GetCelebrityRecognitionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetCelebrityRecognitionCommand(output, context);\n  };\n\n  return GetCelebrityRecognitionCommand;\n}($Command);\n\nexport { GetCelebrityRecognitionCommand };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/client-rekognition/dist/es/commands/GetCelebrityRecognitionCommand.js"],"names":["__extends","GetCelebrityRecognitionRequest","GetCelebrityRecognitionResponse","deserializeAws_json1_1GetCelebrityRecognitionCommand","serializeAws_json1_1GetCelebrityRecognitionCommand","getSerdePlugin","Command","$Command","GetCelebrityRecognitionCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,8BAAT,EAAyCC,+BAAzC,QAAgF,oBAAhF;AACA,SAASC,oDAAT,EAA+DC,kDAA/D,QAA0H,0BAA1H;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,8BAA8B;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAClET,EAAAA,SAAS,CAACQ,8BAAD,EAAiCC,MAAjC,CAAT,CADkE,CAElE;AACA;;;AACA,WAASD,8BAAT,CAAwCE,KAAxC,EAA+C;AAC3C,QAAIC,KAAK,GACT;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;AAGAD,IAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd;AACA,WAAOC,KAAP,CAL2C,CAM3C;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,8BAA8B,CAACK,SAA/B,CAAyCC,iBAAzC,GAA6D,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;AACxG,SAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;AACA,QAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;AACA,QAAIC,UAAU,GAAG,mBAAjB;AACA,QAAIC,WAAW,GAAG,gCAAlB;AACA,QAAIC,uBAAuB,GAAG;AAC1BH,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,UAAU,EAAEA,UAFc;AAG1BC,MAAAA,WAAW,EAAEA,WAHa;AAI1BE,MAAAA,uBAAuB,EAAE3B,8BAA8B,CAAC4B,kBAJ9B;AAK1BC,MAAAA,wBAAwB,EAAE5B,+BAA+B,CAAC2B;AALhC,KAA9B;AAOA,QAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;AACA,WAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;AACpC,aAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;AACH,KAFM,EAEJU,uBAFI,CAAP;AAGH,GAjBD;;AAkBAnB,EAAAA,8BAA8B,CAACK,SAA/B,CAAyCO,SAAzC,GAAqD,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;AAC3E,WAAO/B,kDAAkD,CAACM,KAAD,EAAQyB,OAAR,CAAzD;AACH,GAFD;;AAGA3B,EAAAA,8BAA8B,CAACK,SAA/B,CAAyCQ,WAAzC,GAAuD,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;AAC9E,WAAOhC,oDAAoD,CAACiC,MAAD,EAASD,OAAT,CAA3D;AACH,GAFD;;AAGA,SAAO3B,8BAAP;AACH,CAxCmD,CAwClDD,QAxCkD,CAApD;;AAyCA,SAASC,8BAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetCelebrityRecognitionRequest, GetCelebrityRecognitionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetCelebrityRecognitionCommand, serializeAws_json1_1GetCelebrityRecognitionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by\n *      <a>StartCelebrityRecognition</a>.</p>\n *          <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call\n *       to <a>StartCelebrityRecognition</a>  which returns a job identifier (<code>JobId</code>).\n *       When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartCelebrityRecognition</code>.\n *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetCelebrityDetection</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p>\n *\n *          <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p>\n *          <p>\n *             <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array\n *       (<code>Celebrities</code>) of <a>CelebrityRecognition</a>\n *\n *       objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a <a>CelebrityDetail</a>\n *       object and the time, <code>Timestamp</code>, the celebrity was detected.\n *       </p>\n *          <note>\n *\n *             <p>\n *                <code>GetCelebrityRecognition</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *          <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video).\n *       You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p>\n *          <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don't store\n *       the additional information urls, you can get them later by calling <a>GetCelebrityInfo</a> with the celebrity identifer.</p>\n *          <p>No information is returned for faces not recognized as celebrities.</p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *       pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token\n *       value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>\n */\nvar GetCelebrityRecognitionCommand = /** @class */ (function (_super) {\n    __extends(GetCelebrityRecognitionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetCelebrityRecognitionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetCelebrityRecognitionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"GetCelebrityRecognitionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetCelebrityRecognitionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetCelebrityRecognitionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetCelebrityRecognitionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetCelebrityRecognitionCommand(input, context);\n    };\n    GetCelebrityRecognitionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetCelebrityRecognitionCommand(output, context);\n    };\n    return GetCelebrityRecognitionCommand;\n}($Command));\nexport { GetCelebrityRecognitionCommand };\n"]},"metadata":{},"sourceType":"module"}