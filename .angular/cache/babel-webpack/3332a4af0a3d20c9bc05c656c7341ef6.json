{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UpdateShardCountInput, UpdateShardCountOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1UpdateShardCountCommand, serializeAws_json1_1UpdateShardCountCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Updates the shard count of the specified stream to the specified number of\n *             shards.</p>\n *         <p>Updating the shard count is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Depending on the size of the stream,\n *             the scaling action could take a few minutes to complete. You can continue to read and\n *             write data to your stream while its status is <code>UPDATING</code>.</p>\n *         <p>To update the shard count, Kinesis Data Streams performs splits or merges on\n *             individual shards. This can cause short-lived shards to be created, in addition to the\n *             final shards. These short-lived shards count towards your total shard limit for your\n *             account in the Region.</p>\n *         <p>When using this operation, we recommend that you specify a target shard count that\n *             is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within your\n *             shard limit. However, if you specify a target that isn't a multiple of 25%, the scaling\n *             action might take longer to complete. </p>\n *         <p>This operation has the following default limits. By default, you cannot do the\n *             following:</p>\n *         <ul>\n *             <li>\n *                 <p>Scale more than ten times per rolling 24-hour period per stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than double your current shard count for a\n *                     stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale down below half your current shard count for a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than 500 shards in a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale a stream with more than 500 shards down unless the result is less\n *                     than 500 shards</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than the shard limit for your account</p>\n *             </li>\n *          </ul>\n *         <p>For the default limits for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an\n *             increase in the call rate limit, the shard limit for this API, or your overall shard\n *             limit, use the <a href=\"https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&limitType=service-code-kinesis\">limits form</a>.</p>\n */\n\nvar UpdateShardCountCommand =\n/** @class */\nfunction (_super) {\n  __extends(UpdateShardCountCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function UpdateShardCountCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  UpdateShardCountCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"UpdateShardCountCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: UpdateShardCountInput.filterSensitiveLog,\n      outputFilterSensitiveLog: UpdateShardCountOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  UpdateShardCountCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1UpdateShardCountCommand(input, context);\n  };\n\n  UpdateShardCountCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1UpdateShardCountCommand(output, context);\n  };\n\n  return UpdateShardCountCommand;\n}($Command);\n\nexport { UpdateShardCountCommand };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/client-kinesis/dist/es/commands/UpdateShardCountCommand.js"],"names":["__extends","UpdateShardCountInput","UpdateShardCountOutput","deserializeAws_json1_1UpdateShardCountCommand","serializeAws_json1_1UpdateShardCountCommand","getSerdePlugin","Command","$Command","UpdateShardCountCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,QAA8D,oBAA9D;AACA,SAASC,6CAAT,EAAwDC,2CAAxD,QAA4G,0BAA5G;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC3DT,EAAAA,SAAS,CAACQ,uBAAD,EAA0BC,MAA1B,CAAT,CAD2D,CAE3D;AACA;;;AACA,WAASD,uBAAT,CAAiCE,KAAjC,EAAwC;AACpC,QAAIC,KAAK,GACT;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;AAGAD,IAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd;AACA,WAAOC,KAAP,CALoC,CAMpC;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,uBAAuB,CAACK,SAAxB,CAAkCC,iBAAlC,GAAsD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;AACjG,SAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;AACA,QAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;AACA,QAAIC,UAAU,GAAG,eAAjB;AACA,QAAIC,WAAW,GAAG,yBAAlB;AACA,QAAIC,uBAAuB,GAAG;AAC1BH,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,UAAU,EAAEA,UAFc;AAG1BC,MAAAA,WAAW,EAAEA,WAHa;AAI1BE,MAAAA,uBAAuB,EAAE3B,qBAAqB,CAAC4B,kBAJrB;AAK1BC,MAAAA,wBAAwB,EAAE5B,sBAAsB,CAAC2B;AALvB,KAA9B;AAOA,QAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;AACA,WAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;AACpC,aAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;AACH,KAFM,EAEJU,uBAFI,CAAP;AAGH,GAjBD;;AAkBAnB,EAAAA,uBAAuB,CAACK,SAAxB,CAAkCO,SAAlC,GAA8C,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;AACpE,WAAO/B,2CAA2C,CAACM,KAAD,EAAQyB,OAAR,CAAlD;AACH,GAFD;;AAGA3B,EAAAA,uBAAuB,CAACK,SAAxB,CAAkCQ,WAAlC,GAAgD,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;AACvE,WAAOhC,6CAA6C,CAACiC,MAAD,EAASD,OAAT,CAApD;AACH,GAFD;;AAGA,SAAO3B,uBAAP;AACH,CAxC4C,CAwC3CD,QAxC2C,CAA7C;;AAyCA,SAASC,uBAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { UpdateShardCountInput, UpdateShardCountOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1UpdateShardCountCommand, serializeAws_json1_1UpdateShardCountCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Updates the shard count of the specified stream to the specified number of\n *             shards.</p>\n *         <p>Updating the shard count is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Depending on the size of the stream,\n *             the scaling action could take a few minutes to complete. You can continue to read and\n *             write data to your stream while its status is <code>UPDATING</code>.</p>\n *         <p>To update the shard count, Kinesis Data Streams performs splits or merges on\n *             individual shards. This can cause short-lived shards to be created, in addition to the\n *             final shards. These short-lived shards count towards your total shard limit for your\n *             account in the Region.</p>\n *         <p>When using this operation, we recommend that you specify a target shard count that\n *             is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within your\n *             shard limit. However, if you specify a target that isn't a multiple of 25%, the scaling\n *             action might take longer to complete. </p>\n *         <p>This operation has the following default limits. By default, you cannot do the\n *             following:</p>\n *         <ul>\n *             <li>\n *                 <p>Scale more than ten times per rolling 24-hour period per stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than double your current shard count for a\n *                     stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale down below half your current shard count for a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than 500 shards in a stream</p>\n *             </li>\n *             <li>\n *                 <p>Scale a stream with more than 500 shards down unless the result is less\n *                     than 500 shards</p>\n *             </li>\n *             <li>\n *                 <p>Scale up to more than the shard limit for your account</p>\n *             </li>\n *          </ul>\n *         <p>For the default limits for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an\n *             increase in the call rate limit, the shard limit for this API, or your overall shard\n *             limit, use the <a href=\"https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&limitType=service-code-kinesis\">limits form</a>.</p>\n */\nvar UpdateShardCountCommand = /** @class */ (function (_super) {\n    __extends(UpdateShardCountCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function UpdateShardCountCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    UpdateShardCountCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"UpdateShardCountCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: UpdateShardCountInput.filterSensitiveLog,\n            outputFilterSensitiveLog: UpdateShardCountOutput.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    UpdateShardCountCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1UpdateShardCountCommand(input, context);\n    };\n    UpdateShardCountCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1UpdateShardCountCommand(output, context);\n    };\n    return UpdateShardCountCommand;\n}($Command));\nexport { UpdateShardCountCommand };\n"]},"metadata":{},"sourceType":"module"}