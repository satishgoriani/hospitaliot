{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nimport { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\n\nvar EventStreamMarshaller =\n/** @class */\nfunction () {\n  function EventStreamMarshaller(_a) {\n    var utf8Encoder = _a.utf8Encoder,\n        utf8Decoder = _a.utf8Decoder;\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.utfEncoder = utf8Encoder;\n  }\n\n  EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {\n    var chunkedStream = getChunkedStream(body);\n    var unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n      eventMarshaller: this.eventMarshaller,\n      deserializer: deserializer,\n      toUtf8: this.utfEncoder\n    });\n    return unmarshalledStream;\n  };\n\n  EventStreamMarshaller.prototype.serialize = function (input, serializer) {\n    var _a; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n    var self = this;\n\n    var serializedIterator = function () {\n      return __asyncGenerator(this, arguments, function () {\n        var input_1, input_1_1, chunk, payloadBuf, e_1_1;\n\n        var e_1, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _b.trys.push([0, 7, 8, 13]);\n\n              input_1 = __asyncValues(input);\n              _b.label = 1;\n\n            case 1:\n              return [4\n              /*yield*/\n              , __await(input_1.next())];\n\n            case 2:\n              if (!(input_1_1 = _b.sent(), !input_1_1.done)) return [3\n              /*break*/\n              , 6];\n              chunk = input_1_1.value;\n              payloadBuf = self.eventMarshaller.marshall(serializer(chunk));\n              return [4\n              /*yield*/\n              , __await(payloadBuf)];\n\n            case 3:\n              return [4\n              /*yield*/\n              , _b.sent()];\n\n            case 4:\n              _b.sent();\n\n              _b.label = 5;\n\n            case 5:\n              return [3\n              /*break*/\n              , 1];\n\n            case 6:\n              return [3\n              /*break*/\n              , 13];\n\n            case 7:\n              e_1_1 = _b.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3\n              /*break*/\n              , 13];\n\n            case 8:\n              _b.trys.push([8,, 11, 12]);\n\n              if (!(input_1_1 && !input_1_1.done && (_a = input_1.return))) return [3\n              /*break*/\n              , 10];\n              return [4\n              /*yield*/\n              , __await(_a.call(input_1))];\n\n            case 9:\n              _b.sent();\n\n              _b.label = 10;\n\n            case 10:\n              return [3\n              /*break*/\n              , 12];\n\n            case 11:\n              if (e_1) throw e_1.error;\n              return [7\n              /*endfinally*/\n              ];\n\n            case 12:\n              return [7\n              /*endfinally*/\n              ];\n\n            case 13:\n              return [4\n              /*yield*/\n              , __await(new Uint8Array(0))];\n\n            case 14:\n              // Ending frame\n              return [4\n              /*yield*/\n              , _b.sent()];\n\n            case 15:\n              // Ending frame\n              _b.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    return _a = {}, _a[Symbol.asyncIterator] = serializedIterator, _a;\n  };\n\n  return EventStreamMarshaller;\n}();\n\nexport { EventStreamMarshaller };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/eventstream-serde-universal/dist/es/EventStreamMarshaller.js"],"names":["__asyncGenerator","__asyncValues","__await","__generator","EventStreamMarshaller","EventMarshaller","getChunkedStream","getUnmarshalledStream","_a","utf8Encoder","utf8Decoder","eventMarshaller","utfEncoder","prototype","deserialize","body","deserializer","chunkedStream","unmarshalledStream","toUtf8","serialize","input","serializer","self","serializedIterator","arguments","input_1","input_1_1","chunk","payloadBuf","e_1_1","e_1","_b","label","trys","push","next","sent","done","value","marshall","error","return","call","Uint8Array","Symbol","asyncIterator"],"mappings":"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","sourcesContent":["import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nimport { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\nvar EventStreamMarshaller = /** @class */ (function () {\n    function EventStreamMarshaller(_a) {\n        var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;\n        this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n        this.utfEncoder = utf8Encoder;\n    }\n    EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {\n        var chunkedStream = getChunkedStream(body);\n        var unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n            eventMarshaller: this.eventMarshaller,\n            deserializer: deserializer,\n            toUtf8: this.utfEncoder,\n        });\n        return unmarshalledStream;\n    };\n    EventStreamMarshaller.prototype.serialize = function (input, serializer) {\n        var _a;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var self = this;\n        var serializedIterator = function () {\n            return __asyncGenerator(this, arguments, function () {\n                var input_1, input_1_1, chunk, payloadBuf, e_1_1;\n                var e_1, _a;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 7, 8, 13]);\n                            input_1 = __asyncValues(input);\n                            _b.label = 1;\n                        case 1: return [4 /*yield*/, __await(input_1.next())];\n                        case 2:\n                            if (!(input_1_1 = _b.sent(), !input_1_1.done)) return [3 /*break*/, 6];\n                            chunk = input_1_1.value;\n                            payloadBuf = self.eventMarshaller.marshall(serializer(chunk));\n                            return [4 /*yield*/, __await(payloadBuf)];\n                        case 3: return [4 /*yield*/, _b.sent()];\n                        case 4:\n                            _b.sent();\n                            _b.label = 5;\n                        case 5: return [3 /*break*/, 1];\n                        case 6: return [3 /*break*/, 13];\n                        case 7:\n                            e_1_1 = _b.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3 /*break*/, 13];\n                        case 8:\n                            _b.trys.push([8, , 11, 12]);\n                            if (!(input_1_1 && !input_1_1.done && (_a = input_1.return))) return [3 /*break*/, 10];\n                            return [4 /*yield*/, __await(_a.call(input_1))];\n                        case 9:\n                            _b.sent();\n                            _b.label = 10;\n                        case 10: return [3 /*break*/, 12];\n                        case 11:\n                            if (e_1) throw e_1.error;\n                            return [7 /*endfinally*/];\n                        case 12: return [7 /*endfinally*/];\n                        case 13: return [4 /*yield*/, __await(new Uint8Array(0))];\n                        case 14: \n                        // Ending frame\n                        return [4 /*yield*/, _b.sent()];\n                        case 15:\n                            // Ending frame\n                            _b.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        return _a = {},\n            _a[Symbol.asyncIterator] = serializedIterator,\n            _a;\n    };\n    return EventStreamMarshaller;\n}());\nexport { EventStreamMarshaller };\n"]},"metadata":{},"sourceType":"module"}