{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n\n(function (AWSS3UploadTaskState) {\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\n\nexport var TaskEvents;\n\n(function (TaskEvents) {\n  TaskEvents[\"CANCEL\"] = \"cancel\";\n  TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n  TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n  TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {})); // maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\n\n\nvar MAX_PARTS = 10000; // 5MB in bytes\n\nvar PART_SIZE = 5 * 1024 * 1024;\nvar DEFAULT_QUEUE_SIZE = 4;\n\nfunction comparePartNumber(a, b) {\n  return a.PartNumber - b.PartNumber;\n}\n\nvar AWSS3UploadTask =\n/** @class */\nfunction () {\n  function AWSS3UploadTask(_a) {\n    var s3Client = _a.s3Client,\n        file = _a.file,\n        emitter = _a.emitter,\n        storage = _a.storage,\n        params = _a.params,\n        level = _a.level,\n        prefixPromise = _a.prefixPromise;\n    this.partSize = PART_SIZE;\n    this.queueSize = DEFAULT_QUEUE_SIZE;\n    this.inProgress = [];\n    this.completedParts = [];\n    this.queued = [];\n    this.bytesUploaded = 0;\n    this.totalBytes = 0;\n    this.state = AWSS3UploadTaskState.INIT;\n    this.prefixPromise = prefixPromise;\n    this.s3client = s3Client;\n    this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n    this.storage = storage;\n    this.storageSync = Promise.resolve();\n\n    if (typeof this.storage['sync'] === 'function') {\n      this.storageSync = this.storage['sync']();\n    }\n\n    this.params = params;\n    this.file = file;\n    this.totalBytes = this.file.size;\n    this.bytesUploaded = 0;\n    this.emitter = emitter;\n    this.queued = [];\n    this.fileId = this._getFileId(level);\n\n    this._validateParams(); // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n    // function to it unless user adds their own onError callback\n\n\n    this.emitter.on(TaskEvents.ERROR, function () {});\n  }\n\n  Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n    get: function () {\n      return this.bytesUploaded / this.totalBytes * 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n    get: function () {\n      return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n    var key = _a.key,\n        bucket = _a.bucket;\n    return __awaiter(this, void 0, void 0, function () {\n      var listObjectRes, _b, Contents, prefix, obj;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.s3client.send(new ListObjectsV2Command({\n              Bucket: bucket,\n              Prefix: key\n            }))];\n\n          case 1:\n            listObjectRes = _c.sent();\n            _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n            return [4\n            /*yield*/\n            , this.prefixPromise];\n\n          case 2:\n            prefix = _c.sent();\n            obj = Contents.find(function (o) {\n              return o.Key === \"\" + prefix + key;\n            });\n            return [2\n            /*return*/\n            , obj];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._getFileId = function (level) {\n    // We should check if it's a File first because File is also instance of a Blob\n    if (isFile(this.file)) {\n      return [this.file.name, this.file.lastModified, this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    } else {\n      return [this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    }\n  };\n\n  AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests, cachedUploadFileData, listPartsOutput;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._listCachedUploadTasks()];\n\n          case 1:\n            uploadRequests = _a.sent();\n\n            if (Object.keys(uploadRequests).length === 0 || !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n              return [2\n              /*return*/\n              , {\n                parts: [],\n                uploadId: null\n              }];\n            }\n\n            cachedUploadFileData = uploadRequests[this.fileId];\n            cachedUploadFileData.lastTouched = Date.now();\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [4\n            /*yield*/\n            , this.s3client.send(new ListPartsCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: cachedUploadFileData.uploadId\n            }))];\n\n          case 2:\n            listPartsOutput = _a.sent();\n            return [2\n            /*return*/\n            , {\n              parts: listPartsOutput.Parts || [],\n              uploadId: cachedUploadFileData.uploadId\n            }];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n    this.emitter.emit(event, payload);\n  };\n\n  AWSS3UploadTask.prototype._validateParams = function () {\n    if (this.file.size / this.partSize > MAX_PARTS) {\n      throw new Error(\"Too many parts. Number of parts is \" + this.file.size / this.partSize + \", maximum is \" + MAX_PARTS + \".\");\n    }\n  };\n\n  AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tasks;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storageSync];\n\n          case 1:\n            _a.sent();\n\n            tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n            return [2\n            /*return*/\n            , JSON.parse(tasks)];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._listCachedUploadTasks()];\n\n          case 1:\n            uploadRequests = _a.sent();\n            uploadRequests[this.fileId] = fileMetadata;\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isCached = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = Object.prototype.hasOwnProperty).call;\n            return [4\n            /*yield*/\n            , this._listCachedUploadTasks()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.apply(_a, [_c.sent(), this.fileId])];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._removeFromCache = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._listCachedUploadTasks()];\n\n          case 1:\n            uploadRequests = _a.sent();\n            delete uploadRequests[this.fileId];\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n    var eTag = _a.eTag,\n        partNumber = _a.partNumber,\n        chunk = _a.chunk;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        this.completedParts.push({\n          ETag: eTag,\n          PartNumber: partNumber\n        });\n        this.bytesUploaded += byteLength(chunk);\n\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n          loaded: this.bytesUploaded,\n          total: this.totalBytes\n        }); // Remove the completed item from the inProgress array\n\n\n        this.inProgress = this.inProgress.filter(function (job) {\n          return job.uploadPartInput.PartNumber !== partNumber;\n        });\n        if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED) this._startNextPart();\n        if (this._isDone()) this._completeUpload();\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._completeUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new CompleteMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId,\n              MultipartUpload: {\n                // Parts are not always completed in order, we need to manually sort them\n                Parts: this.completedParts.sort(comparePartNumber)\n              }\n            }))];\n\n          case 1:\n            _a.sent();\n\n            this._verifyFileSize();\n\n            this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n              key: this.params.Bucket + \"/\" + this.params.Key\n            });\n\n            this._removeFromCache();\n\n            this.state = AWSS3UploadTaskState.COMPLETED;\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            err_1 = _a.sent();\n            logger.error('error completing upload', err_1);\n\n            this._emitEvent(TaskEvents.ERROR, err_1);\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new UploadPartCommand(input), {\n              cancelTokenSource: cancelTokenSource\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [4\n            /*yield*/\n            , this._onPartUploadCompletion({\n              eTag: res.ETag,\n              partNumber: input.PartNumber,\n              chunk: input.Body\n            })];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_2 = _a.sent();\n\n            if (this.state === AWSS3UploadTaskState.PAUSED) {\n              logger.log('upload paused');\n            } else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n              logger.log('upload aborted');\n            } else {\n              logger.error('error starting next part of upload: ', err_2);\n            } // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n            // expected behavior\n\n\n            if (!axios.isCancel(err_2) && err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n              this._emitEvent(TaskEvents.ERROR, err_2);\n\n              this.pause();\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._startNextPart = function () {\n    if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n      var cancelTokenSource = axios.CancelToken.source();\n      var nextPart = this.queued.shift();\n      this.inProgress.push({\n        uploadPartInput: nextPart,\n        s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n        cancel: cancelTokenSource.cancel\n      });\n    }\n  };\n  /**\n   * Verify on S3 side that the file size matches the one on the client side.\n   *\n   * @async\n   * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n   */\n\n\n  AWSS3UploadTask.prototype._verifyFileSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var obj, valid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._listSingleFile({\n              key: this.params.Key,\n              bucket: this.params.Bucket\n            })];\n\n          case 1:\n            obj = _a.sent();\n            valid = Boolean(obj && obj.Size === this.file.size);\n\n            if (!valid) {\n              throw new Error('File size does not match between local file and file on s3');\n            }\n\n            return [2\n            /*return*/\n            , valid];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isDone = function () {\n    return !this.queued.length && !this.inProgress.length && this.bytesUploaded === this.totalBytes;\n  };\n\n  AWSS3UploadTask.prototype._createParts = function () {\n    var size = this.file.size;\n    var parts = [];\n\n    for (var bodyStart = 0; bodyStart < size;) {\n      var bodyEnd = Math.min(bodyStart + this.partSize, size);\n      parts.push({\n        Body: this.file.slice(bodyStart, bodyEnd),\n        Key: this.params.Key,\n        Bucket: this.params.Bucket,\n        PartNumber: parts.length + 1,\n        UploadId: this.uploadId\n      });\n      bodyStart += this.partSize;\n    }\n\n    return parts;\n  };\n\n  AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n    this.bytesUploaded += cachedParts.reduce(function (acc, part) {\n      return acc + part.Size;\n    }, 0); // Find the set of part numbers that have already been uploaded\n\n    var uploadedPartNumSet = new Set(cachedParts.map(function (part) {\n      return part.PartNumber;\n    }));\n    this.queued = this.queued.filter(function (part) {\n      return !uploadedPartNumSet.has(part.PartNumber);\n    });\n    this.completedParts = cachedParts.map(function (part) {\n      return {\n        PartNumber: part.PartNumber,\n        ETag: part.ETag\n      };\n    });\n\n    this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytes\n    });\n  };\n\n  AWSS3UploadTask.prototype._initMultipartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n\n          case 1:\n            res = _a.sent();\n\n            this._cache({\n              uploadId: res.UploadId,\n              lastTouched: Date.now(),\n              bucket: this.params.Bucket,\n              key: this.params.Key,\n              fileName: this.file instanceof File ? this.file.name : ''\n            });\n\n            return [2\n            /*return*/\n            , res.UploadId];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._initializeUploadTask = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, parts, uploadId, uploadId, err_3;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.state = AWSS3UploadTaskState.IN_PROGRESS;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this._isCached()];\n\n          case 2:\n            if (!_b.sent()) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._findCachedUploadParts()];\n\n          case 3:\n            _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n\n            this._initCachedUploadParts(parts);\n\n            this._startUpload();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            if (!!this.uploadId) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._initMultipartUpload()];\n\n          case 5:\n            uploadId = _b.sent();\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n\n            this._startUpload();\n\n            _b.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            err_3 = _b.sent();\n\n            if (!axios.isCancel(err_3)) {\n              logger.error('Error initializing the upload task', err_3);\n            }\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype.resume = function () {\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n      logger.warn('Upload task already in progress'); // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n      // starting the upload\n    } else if (!this.uploadId) {\n      this._initializeUploadTask();\n    } else {\n      this._startUpload();\n    }\n  };\n\n  AWSS3UploadTask.prototype._startUpload = function () {\n    this.state = AWSS3UploadTaskState.IN_PROGRESS;\n\n    for (var i = 0; i < this.queueSize; i++) {\n      this._startNextPart();\n    }\n  };\n\n  AWSS3UploadTask.prototype._cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3\n            /*break*/\n            , 1];\n            logger.warn('This task has already been cancelled');\n            return [2\n            /*return*/\n            , false];\n\n          case 1:\n            if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3\n            /*break*/\n            , 2];\n            logger.warn('This task has already been completed');\n            return [2\n            /*return*/\n            , false];\n\n          case 2:\n            this.pause();\n            this.queued = [];\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.state = AWSS3UploadTaskState.CANCELLED;\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new AbortMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId\n            }))];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this._removeFromCache()];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 6:\n            err_4 = _a.sent();\n            logger.error('Error cancelling upload task', err_4);\n            return [2\n            /*return*/\n            , false];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * pause this particular upload task\n   **/\n\n\n  AWSS3UploadTask.prototype.pause = function () {\n    var _a;\n\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.PAUSED) {\n      logger.warn('This task is already paused');\n    }\n\n    this.state = AWSS3UploadTaskState.PAUSED; // Use axios cancel token to abort the part request immediately\n    // Add the inProgress parts back to pending\n\n    var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n    removedInProgressReq.forEach(function (req) {\n      req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n    }); // Put all removed in progress parts back into the queue\n\n    (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) {\n      return req.uploadPartInput;\n    })));\n  };\n\n  return AWSS3UploadTask;\n}();\n\nexport { AWSS3UploadTask };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-amplify/storage/lib-esm/providers/AWSS3UploadTask.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__read","o","m","i","r","ar","error","__spread","arguments","concat","UploadPartCommand","CompleteMultipartUploadCommand","AbortMultipartUploadCommand","ListPartsCommand","CreateMultipartUploadCommand","ListObjectsV2Command","axios","Logger","byteLength","isFile","AWSS3ProviderUploadErrorStrings","SET_CONTENT_LENGTH_HEADER","UPLOADS_STORAGE_KEY","logger","AWSS3UploadTaskState","TaskEvents","MAX_PARTS","PART_SIZE","DEFAULT_QUEUE_SIZE","comparePartNumber","a","b","PartNumber","AWSS3UploadTask","_a","s3Client","file","emitter","storage","params","level","prefixPromise","partSize","queueSize","inProgress","completedParts","queued","bytesUploaded","totalBytes","state","INIT","s3client","middlewareStack","remove","storageSync","size","fileId","_getFileId","_validateParams","on","ERROR","Object","defineProperty","prototype","get","enumerable","configurable","IN_PROGRESS","_listSingleFile","key","bucket","listObjectRes","_b","Contents","prefix","obj","_c","send","Bucket","Prefix","find","Key","name","lastModified","type","join","_findCachedUploadParts","uploadRequests","cachedUploadFileData","listPartsOutput","_listCachedUploadTasks","keys","hasOwnProperty","parts","uploadId","lastTouched","Date","now","setItem","JSON","stringify","UploadId","Parts","_emitEvent","event","payload","emit","Error","tasks","getItem","parse","_cache","fileMetadata","_isCached","_removeFromCache","_onPartUploadCompletion","eTag","partNumber","chunk","ETag","UPLOAD_PROGRESS","loaded","total","filter","job","uploadPartInput","PAUSED","_startNextPart","_isDone","_completeUpload","err_1","MultipartUpload","sort","_verifyFileSize","UPLOAD_COMPLETE","COMPLETED","_makeUploadPartRequest","input","cancelTokenSource","res","err_2","Body","log","CANCELLED","isCancel","message","UPLOAD_PAUSED_MESSAGE","pause","CancelToken","source","nextPart","shift","s3Request","cancel","valid","Boolean","Size","_createParts","bodyStart","bodyEnd","Math","min","slice","_initCachedUploadParts","cachedParts","reduce","acc","part","uploadedPartNumSet","Set","map","has","_initMultipartUpload","fileName","File","_initializeUploadTask","err_3","_startUpload","resume","warn","_cancel","err_4","removedInProgressReq","splice","forEach","req","unshift"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command, } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY, } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n(function (AWSS3UploadTaskState) {\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\nexport var TaskEvents;\n(function (TaskEvents) {\n    TaskEvents[\"CANCEL\"] = \"cancel\";\n    TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n    TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n    TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {}));\n// maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\nvar MAX_PARTS = 10000;\n// 5MB in bytes\nvar PART_SIZE = 5 * 1024 * 1024;\nvar DEFAULT_QUEUE_SIZE = 4;\nfunction comparePartNumber(a, b) {\n    return a.PartNumber - b.PartNumber;\n}\nvar AWSS3UploadTask = /** @class */ (function () {\n    function AWSS3UploadTask(_a) {\n        var s3Client = _a.s3Client, file = _a.file, emitter = _a.emitter, storage = _a.storage, params = _a.params, level = _a.level, prefixPromise = _a.prefixPromise;\n        this.partSize = PART_SIZE;\n        this.queueSize = DEFAULT_QUEUE_SIZE;\n        this.inProgress = [];\n        this.completedParts = [];\n        this.queued = [];\n        this.bytesUploaded = 0;\n        this.totalBytes = 0;\n        this.state = AWSS3UploadTaskState.INIT;\n        this.prefixPromise = prefixPromise;\n        this.s3client = s3Client;\n        this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n        this.storage = storage;\n        this.storageSync = Promise.resolve();\n        if (typeof this.storage['sync'] === 'function') {\n            this.storageSync = this.storage['sync']();\n        }\n        this.params = params;\n        this.file = file;\n        this.totalBytes = this.file.size;\n        this.bytesUploaded = 0;\n        this.emitter = emitter;\n        this.queued = [];\n        this.fileId = this._getFileId(level);\n        this._validateParams();\n        // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n        // function to it unless user adds their own onError callback\n        this.emitter.on(TaskEvents.ERROR, function () { });\n    }\n    Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n        get: function () {\n            return (this.bytesUploaded / this.totalBytes) * 100;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n        get: function () {\n            return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n        var key = _a.key, bucket = _a.bucket;\n        return __awaiter(this, void 0, void 0, function () {\n            var listObjectRes, _b, Contents, prefix, obj;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.s3client.send(new ListObjectsV2Command({\n                            Bucket: bucket,\n                            Prefix: key,\n                        }))];\n                    case 1:\n                        listObjectRes = _c.sent();\n                        _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n                        return [4 /*yield*/, this.prefixPromise];\n                    case 2:\n                        prefix = _c.sent();\n                        obj = Contents.find(function (o) { return o.Key === \"\" + prefix + key; });\n                        return [2 /*return*/, obj];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._getFileId = function (level) {\n        // We should check if it's a File first because File is also instance of a Blob\n        if (isFile(this.file)) {\n            return [\n                this.file.name,\n                this.file.lastModified,\n                this.file.size,\n                this.file.type,\n                this.params.Bucket,\n                level,\n                this.params.Key,\n            ].join('-');\n        }\n        else {\n            return [\n                this.file.size,\n                this.file.type,\n                this.params.Bucket,\n                level,\n                this.params.Key,\n            ].join('-');\n        }\n    };\n    AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests, cachedUploadFileData, listPartsOutput;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        if (Object.keys(uploadRequests).length === 0 ||\n                            !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n                            return [2 /*return*/, { parts: [], uploadId: null }];\n                        }\n                        cachedUploadFileData = uploadRequests[this.fileId];\n                        cachedUploadFileData.lastTouched = Date.now();\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [4 /*yield*/, this.s3client.send(new ListPartsCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: cachedUploadFileData.uploadId,\n                            }))];\n                    case 2:\n                        listPartsOutput = _a.sent();\n                        return [2 /*return*/, {\n                                parts: listPartsOutput.Parts || [],\n                                uploadId: cachedUploadFileData.uploadId,\n                            }];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n        this.emitter.emit(event, payload);\n    };\n    AWSS3UploadTask.prototype._validateParams = function () {\n        if (this.file.size / this.partSize > MAX_PARTS) {\n            throw new Error(\"Too many parts. Number of parts is \" + this.file.size /\n                this.partSize + \", maximum is \" + MAX_PARTS + \".\");\n        }\n    };\n    AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tasks;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.storageSync];\n                    case 1:\n                        _a.sent();\n                        tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n                        return [2 /*return*/, JSON.parse(tasks)];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        uploadRequests[this.fileId] = fileMetadata;\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._isCached = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = Object.prototype.hasOwnProperty).call;\n                        return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(),\n                            this.fileId])];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._removeFromCache = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        delete uploadRequests[this.fileId];\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n        var eTag = _a.eTag, partNumber = _a.partNumber, chunk = _a.chunk;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                this.completedParts.push({\n                    ETag: eTag,\n                    PartNumber: partNumber,\n                });\n                this.bytesUploaded += byteLength(chunk);\n                this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n                    loaded: this.bytesUploaded,\n                    total: this.totalBytes,\n                });\n                // Remove the completed item from the inProgress array\n                this.inProgress = this.inProgress.filter(function (job) { return job.uploadPartInput.PartNumber !== partNumber; });\n                if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED)\n                    this._startNextPart();\n                if (this._isDone())\n                    this._completeUpload();\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._completeUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.s3client.send(new CompleteMultipartUploadCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: this.uploadId,\n                                MultipartUpload: {\n                                    // Parts are not always completed in order, we need to manually sort them\n                                    Parts: this.completedParts.sort(comparePartNumber),\n                                },\n                            }))];\n                    case 1:\n                        _a.sent();\n                        this._verifyFileSize();\n                        this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n                            key: this.params.Bucket + \"/\" + this.params.Key,\n                        });\n                        this._removeFromCache();\n                        this.state = AWSS3UploadTaskState.COMPLETED;\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_1 = _a.sent();\n                        logger.error('error completing upload', err_1);\n                        this._emitEvent(TaskEvents.ERROR, err_1);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res, err_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this.s3client.send(new UploadPartCommand(input), {\n                                cancelTokenSource: cancelTokenSource,\n                            })];\n                    case 1:\n                        res = _a.sent();\n                        return [4 /*yield*/, this._onPartUploadCompletion({\n                                eTag: res.ETag,\n                                partNumber: input.PartNumber,\n                                chunk: input.Body,\n                            })];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_2 = _a.sent();\n                        if (this.state === AWSS3UploadTaskState.PAUSED) {\n                            logger.log('upload paused');\n                        }\n                        else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n                            logger.log('upload aborted');\n                        }\n                        else {\n                            logger.error('error starting next part of upload: ', err_2);\n                        }\n                        // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n                        // expected behavior\n                        if (!axios.isCancel(err_2) &&\n                            err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n                            this._emitEvent(TaskEvents.ERROR, err_2);\n                            this.pause();\n                        }\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._startNextPart = function () {\n        if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n            var cancelTokenSource = axios.CancelToken.source();\n            var nextPart = this.queued.shift();\n            this.inProgress.push({\n                uploadPartInput: nextPart,\n                s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n                cancel: cancelTokenSource.cancel,\n            });\n        }\n    };\n    /**\n     * Verify on S3 side that the file size matches the one on the client side.\n     *\n     * @async\n     * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n     */\n    AWSS3UploadTask.prototype._verifyFileSize = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var obj, valid;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listSingleFile({\n                            key: this.params.Key,\n                            bucket: this.params.Bucket,\n                        })];\n                    case 1:\n                        obj = _a.sent();\n                        valid = Boolean(obj && obj.Size === this.file.size);\n                        if (!valid) {\n                            throw new Error('File size does not match between local file and file on s3');\n                        }\n                        return [2 /*return*/, valid];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._isDone = function () {\n        return (!this.queued.length &&\n            !this.inProgress.length &&\n            this.bytesUploaded === this.totalBytes);\n    };\n    AWSS3UploadTask.prototype._createParts = function () {\n        var size = this.file.size;\n        var parts = [];\n        for (var bodyStart = 0; bodyStart < size;) {\n            var bodyEnd = Math.min(bodyStart + this.partSize, size);\n            parts.push({\n                Body: this.file.slice(bodyStart, bodyEnd),\n                Key: this.params.Key,\n                Bucket: this.params.Bucket,\n                PartNumber: parts.length + 1,\n                UploadId: this.uploadId,\n            });\n            bodyStart += this.partSize;\n        }\n        return parts;\n    };\n    AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n        this.bytesUploaded += cachedParts.reduce(function (acc, part) { return acc + part.Size; }, 0);\n        // Find the set of part numbers that have already been uploaded\n        var uploadedPartNumSet = new Set(cachedParts.map(function (part) { return part.PartNumber; }));\n        this.queued = this.queued.filter(function (part) { return !uploadedPartNumSet.has(part.PartNumber); });\n        this.completedParts = cachedParts.map(function (part) { return ({\n            PartNumber: part.PartNumber,\n            ETag: part.ETag,\n        }); });\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n            loaded: this.bytesUploaded,\n            total: this.totalBytes,\n        });\n    };\n    AWSS3UploadTask.prototype._initMultipartUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n                    case 1:\n                        res = _a.sent();\n                        this._cache({\n                            uploadId: res.UploadId,\n                            lastTouched: Date.now(),\n                            bucket: this.params.Bucket,\n                            key: this.params.Key,\n                            fileName: this.file instanceof File ? this.file.name : '',\n                        });\n                        return [2 /*return*/, res.UploadId];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._initializeUploadTask = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, parts, uploadId, uploadId, err_3;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.state = AWSS3UploadTaskState.IN_PROGRESS;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 7, , 8]);\n                        return [4 /*yield*/, this._isCached()];\n                    case 2:\n                        if (!_b.sent()) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._findCachedUploadParts()];\n                    case 3:\n                        _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n                        this.uploadId = uploadId;\n                        this.queued = this._createParts();\n                        this._initCachedUploadParts(parts);\n                        this._startUpload();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        if (!!this.uploadId) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._initMultipartUpload()];\n                    case 5:\n                        uploadId = _b.sent();\n                        this.uploadId = uploadId;\n                        this.queued = this._createParts();\n                        this._startUpload();\n                        _b.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        err_3 = _b.sent();\n                        if (!axios.isCancel(err_3)) {\n                            logger.error('Error initializing the upload task', err_3);\n                        }\n                        return [3 /*break*/, 8];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype.resume = function () {\n        if (this.state === AWSS3UploadTaskState.CANCELLED) {\n            logger.warn('This task has already been cancelled');\n        }\n        else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n            logger.warn('This task has already been completed');\n        }\n        else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n            logger.warn('Upload task already in progress');\n            // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n            // starting the upload\n        }\n        else if (!this.uploadId) {\n            this._initializeUploadTask();\n        }\n        else {\n            this._startUpload();\n        }\n    };\n    AWSS3UploadTask.prototype._startUpload = function () {\n        this.state = AWSS3UploadTaskState.IN_PROGRESS;\n        for (var i = 0; i < this.queueSize; i++) {\n            this._startNextPart();\n        }\n    };\n    AWSS3UploadTask.prototype._cancel = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3 /*break*/, 1];\n                        logger.warn('This task has already been cancelled');\n                        return [2 /*return*/, false];\n                    case 1:\n                        if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3 /*break*/, 2];\n                        logger.warn('This task has already been completed');\n                        return [2 /*return*/, false];\n                    case 2:\n                        this.pause();\n                        this.queued = [];\n                        this.completedParts = [];\n                        this.bytesUploaded = 0;\n                        this.state = AWSS3UploadTaskState.CANCELLED;\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 6, , 7]);\n                        return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: this.uploadId,\n                            }))];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, this._removeFromCache()];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 6:\n                        err_4 = _a.sent();\n                        logger.error('Error cancelling upload task', err_4);\n                        return [2 /*return*/, false];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * pause this particular upload task\n     **/\n    AWSS3UploadTask.prototype.pause = function () {\n        var _a;\n        if (this.state === AWSS3UploadTaskState.CANCELLED) {\n            logger.warn('This task has already been cancelled');\n        }\n        else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n            logger.warn('This task has already been completed');\n        }\n        else if (this.state === AWSS3UploadTaskState.PAUSED) {\n            logger.warn('This task is already paused');\n        }\n        this.state = AWSS3UploadTaskState.PAUSED;\n        // Use axios cancel token to abort the part request immediately\n        // Add the inProgress parts back to pending\n        var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n        removedInProgressReq.forEach(function (req) {\n            req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n        });\n        // Put all removed in progress parts back into the queue\n        (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) { return req.uploadPartInput; })));\n    };\n    return AWSS3UploadTask;\n}());\nexport { AWSS3UploadTask };\n"]},"metadata":{},"sourceType":"module"}