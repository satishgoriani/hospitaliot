{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetTextDetectionRequest, GetTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetTextDetectionCommand, serializeAws_json1_1GetTextDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the text detection results of a Amazon Rekognition Video analysis started by <a>StartTextDetection</a>.</p>\n *          <p>Text detection with Amazon Rekognition Video is an asynchronous operation. You start text detection by\n *      calling <a>StartTextDetection</a> which returns a job identifier (<code>JobId</code>)\n *      When the text detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *      topic registered in the initial call to <code>StartTextDetection</code>. To get the results\n *      of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      if so, call <code>GetTextDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *      of <code>StartLabelDetection</code>.</p>\n *          <p>\n *             <code>GetTextDetection</code> returns an array of detected text (<code>TextDetections</code>) sorted by\n *        the time the text was detected, up to 50 words per frame of video.</p>\n *          <p>Each element of the array includes the detected text, the precentage confidence in the acuracy\n *        of the detected text, the time the text was detected, bounding box information for where the text\n *        was located, and unique identifiers for words and their lines.</p>\n *          <p>Use MaxResults parameter to limit the number of text detections returned. If there are more results than\n *      specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *      a pagination token for getting the next set of results. To get the next page of results, call <code>GetTextDetection</code>\n *      and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *      call to <code>GetTextDetection</code>.</p>\n */\n\nvar GetTextDetectionCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetTextDetectionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetTextDetectionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetTextDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetTextDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetTextDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetTextDetectionCommand(input, context);\n  };\n\n  GetTextDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetTextDetectionCommand(output, context);\n  };\n\n  return GetTextDetectionCommand;\n}($Command);\n\nexport { GetTextDetectionCommand };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/client-rekognition/dist/es/commands/GetTextDetectionCommand.js"],"names":["__extends","GetTextDetectionRequest","GetTextDetectionResponse","deserializeAws_json1_1GetTextDetectionCommand","serializeAws_json1_1GetTextDetectionCommand","getSerdePlugin","Command","$Command","GetTextDetectionCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,uBAAT,EAAkCC,wBAAlC,QAAkE,oBAAlE;AACA,SAASC,6CAAT,EAAwDC,2CAAxD,QAA4G,0BAA5G;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC3DT,EAAAA,SAAS,CAACQ,uBAAD,EAA0BC,MAA1B,CAAT,CAD2D,CAE3D;AACA;;;AACA,WAASD,uBAAT,CAAiCE,KAAjC,EAAwC;AACpC,QAAIC,KAAK,GACT;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;AAGAD,IAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd;AACA,WAAOC,KAAP,CALoC,CAMpC;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,uBAAuB,CAACK,SAAxB,CAAkCC,iBAAlC,GAAsD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;AACjG,SAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;AACA,QAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;AACA,QAAIC,UAAU,GAAG,mBAAjB;AACA,QAAIC,WAAW,GAAG,yBAAlB;AACA,QAAIC,uBAAuB,GAAG;AAC1BH,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,UAAU,EAAEA,UAFc;AAG1BC,MAAAA,WAAW,EAAEA,WAHa;AAI1BE,MAAAA,uBAAuB,EAAE3B,uBAAuB,CAAC4B,kBAJvB;AAK1BC,MAAAA,wBAAwB,EAAE5B,wBAAwB,CAAC2B;AALzB,KAA9B;AAOA,QAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;AACA,WAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;AACpC,aAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;AACH,KAFM,EAEJU,uBAFI,CAAP;AAGH,GAjBD;;AAkBAnB,EAAAA,uBAAuB,CAACK,SAAxB,CAAkCO,SAAlC,GAA8C,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;AACpE,WAAO/B,2CAA2C,CAACM,KAAD,EAAQyB,OAAR,CAAlD;AACH,GAFD;;AAGA3B,EAAAA,uBAAuB,CAACK,SAAxB,CAAkCQ,WAAlC,GAAgD,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;AACvE,WAAOhC,6CAA6C,CAACiC,MAAD,EAASD,OAAT,CAApD;AACH,GAFD;;AAGA,SAAO3B,uBAAP;AACH,CAxC4C,CAwC3CD,QAxC2C,CAA7C;;AAyCA,SAASC,uBAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { GetTextDetectionRequest, GetTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetTextDetectionCommand, serializeAws_json1_1GetTextDetectionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the text detection results of a Amazon Rekognition Video analysis started by <a>StartTextDetection</a>.</p>\n *          <p>Text detection with Amazon Rekognition Video is an asynchronous operation. You start text detection by\n *      calling <a>StartTextDetection</a> which returns a job identifier (<code>JobId</code>)\n *      When the text detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *      topic registered in the initial call to <code>StartTextDetection</code>. To get the results\n *      of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      if so, call <code>GetTextDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *      of <code>StartLabelDetection</code>.</p>\n *          <p>\n *             <code>GetTextDetection</code> returns an array of detected text (<code>TextDetections</code>) sorted by\n *        the time the text was detected, up to 50 words per frame of video.</p>\n *          <p>Each element of the array includes the detected text, the precentage confidence in the acuracy\n *        of the detected text, the time the text was detected, bounding box information for where the text\n *        was located, and unique identifiers for words and their lines.</p>\n *          <p>Use MaxResults parameter to limit the number of text detections returned. If there are more results than\n *      specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *      a pagination token for getting the next set of results. To get the next page of results, call <code>GetTextDetection</code>\n *      and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *      call to <code>GetTextDetection</code>.</p>\n */\nvar GetTextDetectionCommand = /** @class */ (function (_super) {\n    __extends(GetTextDetectionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function GetTextDetectionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    GetTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"RekognitionClient\";\n        var commandName = \"GetTextDetectionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: GetTextDetectionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: GetTextDetectionResponse.filterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    GetTextDetectionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1GetTextDetectionCommand(input, context);\n    };\n    GetTextDetectionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1GetTextDetectionCommand(output, context);\n    };\n    return GetTextDetectionCommand;\n}($Command));\nexport { GetTextDetectionCommand };\n"]},"metadata":{},"sourceType":"module"}