{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartStreamEncryptionInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartStreamEncryptionCommand, serializeAws_json1_1StartStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Enables or updates server-side encryption using an AWS KMS key for a specified\n *             stream. </p>\n *         <p>Starting encryption is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Updating or applying encryption\n *             normally takes a few seconds to complete, but it can take minutes. You can continue to\n *             read and write data to your stream while its status is <code>UPDATING</code>. Once the\n *             status of the stream is <code>ACTIVE</code>, encryption begins for records written to\n *             the stream. </p>\n *         <p>API Limits: You can successfully apply a new AWS KMS key for server-side encryption\n *             25 times in a rolling 24-hour period.</p>\n *         <p>Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code>\n *             status before all records written to the stream are encrypted. After you enable\n *             encryption, you can verify that encryption is applied by inspecting the API response\n *             from <code>PutRecord</code> or <code>PutRecords</code>.</p>\n */\n\nvar StartStreamEncryptionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartStreamEncryptionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartStreamEncryptionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"StartStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartStreamEncryptionCommand(input, context);\n  };\n\n  StartStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartStreamEncryptionCommand(output, context);\n  };\n\n  return StartStreamEncryptionCommand;\n}($Command);\n\nexport { StartStreamEncryptionCommand };","map":{"version":3,"sources":["c:/work/NodeProjects/hospitaliot/node_modules/@aws-sdk/client-kinesis/dist/es/commands/StartStreamEncryptionCommand.js"],"names":["__extends","StartStreamEncryptionInput","deserializeAws_json1_1StartStreamEncryptionCommand","serializeAws_json1_1StartStreamEncryptionCommand","getSerdePlugin","Command","$Command","StartStreamEncryptionCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","requestHandler","resolve","request","handle","context"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,0BAAT,QAA2C,oBAA3C;AACA,SAASC,kDAAT,EAA6DC,gDAA7D,QAAsH,0BAAtH;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,4BAA4B;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAChER,EAAAA,SAAS,CAACO,4BAAD,EAA+BC,MAA/B,CAAT,CADgE,CAEhE;AACA;;;AACA,WAASD,4BAAT,CAAsCE,KAAtC,EAA6C;AACzC,QAAIC,KAAK,GACT;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;AAGAD,IAAAA,KAAK,CAACD,KAAN,GAAcA,KAAd;AACA,WAAOC,KAAP,CALyC,CAMzC;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,4BAA4B,CAACK,SAA7B,CAAuCC,iBAAvC,GAA2D,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;AACtG,SAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,QAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;AACA,QAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;AACA,QAAIC,UAAU,GAAG,eAAjB;AACA,QAAIC,WAAW,GAAG,8BAAlB;AACA,QAAIC,uBAAuB,GAAG;AAC1BH,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,UAAU,EAAEA,UAFc;AAG1BC,MAAAA,WAAW,EAAEA,WAHa;AAI1BE,MAAAA,uBAAuB,EAAE1B,0BAA0B,CAAC2B,kBAJ1B;AAK1BC,MAAAA,wBAAwB,EAAE,UAAUC,MAAV,EAAkB;AAAE,eAAOA,MAAP;AAAgB;AALpC,KAA9B;AAOA,QAAIC,cAAc,GAAGhB,aAAa,CAACgB,cAAnC;AACA,WAAOV,KAAK,CAACW,OAAN,CAAc,UAAUC,OAAV,EAAmB;AACpC,aAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuCjB,OAAO,IAAI,EAAlD,CAAP;AACH,KAFM,EAEJU,uBAFI,CAAP;AAGH,GAjBD;;AAkBAnB,EAAAA,4BAA4B,CAACK,SAA7B,CAAuCO,SAAvC,GAAmD,UAAUV,KAAV,EAAiB0B,OAAjB,EAA0B;AACzE,WAAOhC,gDAAgD,CAACM,KAAD,EAAQ0B,OAAR,CAAvD;AACH,GAFD;;AAGA5B,EAAAA,4BAA4B,CAACK,SAA7B,CAAuCQ,WAAvC,GAAqD,UAAUU,MAAV,EAAkBK,OAAlB,EAA2B;AAC5E,WAAOjC,kDAAkD,CAAC4B,MAAD,EAASK,OAAT,CAAzD;AACH,GAFD;;AAGA,SAAO5B,4BAAP;AACH,CAxCiD,CAwChDD,QAxCgD,CAAlD;;AAyCA,SAASC,4BAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { StartStreamEncryptionInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartStreamEncryptionCommand, serializeAws_json1_1StartStreamEncryptionCommand, } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Enables or updates server-side encryption using an AWS KMS key for a specified\n *             stream. </p>\n *         <p>Starting encryption is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Updating or applying encryption\n *             normally takes a few seconds to complete, but it can take minutes. You can continue to\n *             read and write data to your stream while its status is <code>UPDATING</code>. Once the\n *             status of the stream is <code>ACTIVE</code>, encryption begins for records written to\n *             the stream. </p>\n *         <p>API Limits: You can successfully apply a new AWS KMS key for server-side encryption\n *             25 times in a rolling 24-hour period.</p>\n *         <p>Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code>\n *             status before all records written to the stream are encrypted. After you enable\n *             encryption, you can verify that encryption is applied by inspecting the API response\n *             from <code>PutRecord</code> or <code>PutRecords</code>.</p>\n */\nvar StartStreamEncryptionCommand = /** @class */ (function (_super) {\n    __extends(StartStreamEncryptionCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function StartStreamEncryptionCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    /**\n     * @internal\n     */\n    StartStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"KinesisClient\";\n        var commandName = \"StartStreamEncryptionCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: StartStreamEncryptionInput.filterSensitiveLog,\n            outputFilterSensitiveLog: function (output) { return output; },\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    StartStreamEncryptionCommand.prototype.serialize = function (input, context) {\n        return serializeAws_json1_1StartStreamEncryptionCommand(input, context);\n    };\n    StartStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_json1_1StartStreamEncryptionCommand(output, context);\n    };\n    return StartStreamEncryptionCommand;\n}($Command));\nexport { StartStreamEncryptionCommand };\n"]},"metadata":{},"sourceType":"module"}